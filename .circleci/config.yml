version: 2.1
orbs:
  node: circleci/node@5.2.0
  slack: circleci/slack@4.13.3
jobs:
  build_and_test:
    docker:
      - image: cimg/python:3.12.4-browsers
        environment:
          CIRCLECI: true
          PGHOST: 127.0.0.1
      - image: cimg/postgres:16.3-postgis
        environment:
          POSTGRES_USER: every_election
          POSTGRES_DB: every_election

    working_directory: ~/repo

    steps:
      - checkout

      - node/install:
          node-version: '18'

      - restore_cache:
          key: v3-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/testing.txt" }}-{{ checksum "requirements/cdk.txt" }}

      - run:
          name: Install node node_modules
          command: npm ci
          cache-path: ~/repo/node_modules
          override-ci-command: npm ci

      - run:
          name: Install app dependencies
          command: |
            sudo apt update && sudo apt install -y gdal-bin python3-gdal python3-dev
            pyenv local $(ls ~/.pyenv/versions/)
            python -m venv .venv
            . .venv/bin/activate
            pip install --upgrade pip
            pip install coveralls wheel
            pip install -r requirements/testing.txt
      - run:
          name: Install Playwright
          command: |
            . .venv/bin/activate
            playwright install
      - run:
          name: Install CDK Python dependencies
          command: |
            . .venv/bin/activate
            pip install -r requirements/cdk.txt
      - run:
          name: Pip safety check
          command: |
            . .venv/bin/activate
            safety check
      - save_cache:
          paths:
            - ./.venv
            - ./node_modules
          key: v3-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/testing.txt" }}-{{ checksum "requirements/cdk.txt" }}

      - run:
          name: Pre-test checks
          command: |
            . .venv/bin/activate
            python --version
            python manage.py --version
            python manage.py check
            python manage.py makemigrations --check
            pip check
            ruff format . --check
            ruff check .

      - run:
          name: Run tests
          command: |
            . .venv/bin/activate
            pytest --cov-report= --cov=every_election --junitxml=test-results/junit.xml

      - run:
          name: Submit coverage
          command: |
            . .venv/bin/activate
            coveralls

      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results

  cdk_synth:
    machine:
      image: ubuntu-2404:2024.05.1
    working_directory: ~/repo
    parameters:
      dc-environment:
        type: enum
        enum: [ development, staging, production ]
    environment:
      DC_ENVIRONMENT: "<<parameters.dc-environment>>"

    steps:
    - checkout
    - restore_cache:
        key: v3-machine-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/testing.txt" }}-{{ checksum "requirements/cdk.txt" }}
    - run:
        name: Install CDK Python dependencies
        command: |
          pyenv local $(ls -1 /opt/circleci/.pyenv/versions | grep 3.12)
          python -m venv .venv
          . .venv/bin/activate
          pip install -r requirements/cdk.txt

    - save_cache:
        paths:
          - ./.venv
          - ./node_modules
        key: v3-machine-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/testing.txt" }}-{{ checksum "requirements/cdk.txt" }}

    - run:
        name: CDK version
        command: |
          npx cdk --version
    - run:
        name: CDK synth
        command: |
          . .venv/bin/activate
          npx cdk synth --all

    - persist_to_workspace:
        root: ~/repo/
        paths: [ cdk.out ]
    
    - slack/notify:
          event: fail
          template: basic_fail_1
          channel: $SLACK_DEFAULT_CHANNEL 


  cdk_deploy:
    machine:
      image: ubuntu-2404:2024.05.1
    working_directory: ~/repo
    parameters:
      dc-environment:
        type: enum
        enum: [ development, staging, production ]
    environment:
      DC_ENVIRONMENT: "<<parameters.dc-environment>>"

    steps:
    - checkout
    - restore_cache:
        key: v3-machine-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/testing.txt" }}-{{ checksum "requirements/cdk.txt" }}
    - run:
        name: CDK deploy
        command: |
          pyenv local $(ls -1 /opt/circleci/.pyenv/versions | grep 3.12)
          . .venv/bin/activate
          npx cdk deploy --all --require-approval never --concurrency 3
    - save_cache:
        paths:
        - .cdk.out
        key: v3-machine-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/testing.txt" }}-{{ checksum "requirements/cdk.txt" }}
    - slack/notify:
          event: fail
          template: basic_fail_1
          channel: $SLACK_DEFAULT_CHANNEL


  code_deploy:
    docker:
      - image: cimg/python:3.12.4-node
        environment:
          CIRCLECI: true
          PGHOST: 127.0.0.1
    working_directory: ~/repo
    parameters:
      dc-environment:
        type: enum
        enum: [ development, staging, production ]
    environment:
      DC_ENVIRONMENT: "<<parameters.dc-environment>>"

    steps:
    - checkout
    - node/install:
        node-version: '18'
    - restore_cache:
        key: v3-dependencies-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/testing.txt" }}-{{ checksum "requirements/cdk.txt" }}
    - run:
        name: "Code Deploy: Create deployment group"
        command: |
          pyenv local $(ls ~/.pyenv/versions/)
          . .venv/bin/activate
          python deployscripts/create_deployment_group.py
    - run:
        name: "Code Deploy: Create deployment"
        command: |
          . .venv/bin/activate
          COMMIT_SHA=$CIRCLE_SHA1 python deployscripts/create_deployment.py
    - slack/notify:
          event: fail
          template: basic_fail_1
          channel: $SLACK_DEFAULT_CHANNEL

workflows:
  version: 2
  test_build_deploy:
    jobs:
    - build_and_test
    - cdk_synth:
        name: "CDK Synth"
        requires:
        - build_and_test
        context: [deployment-development-ee, slack-secrets]
        dc-environment: development
    - cdk_deploy:
        name: "Development: CDK Deploy"
        requires:
        - "CDK Synth"
        context: [deployment-development-ee, slack-secrets]
        dc-environment: development
    - code_deploy:
        name: "Development: AWS CodeDeploy"
        requires:
        - "Development: CDK Deploy"
        context: [deployment-development-ee, slack-secrets]
        dc-environment: development
    - cdk_deploy:
        name: "Staging: CDK Deploy"
        requires:
        - "CDK Synth"
        context: [deployment-staging-ee, slack-secrets]
        filters: { branches: { only: [ main, master ] } }
        dc-environment: staging
    - code_deploy:
        name: "Staging: AWS CodeDeploy"
        requires:
        - "Staging: CDK Deploy"
        context: [deployment-staging-ee, slack-secrets]
        filters: { branches: { only: [ main, master ] } }
        dc-environment: staging
    - cdk_deploy:
        name: "Production: CDK Deploy"
        requires:
        - "CDK Synth"
        - "Staging: AWS CodeDeploy"
        context: [deployment-production-ee, slack-secrets]
        filters: { branches: { only: [ main, master ] } }
        dc-environment: production
    - code_deploy:
        name: "Production: AWS CodeDeploy"
        requires:
        - "Production: CDK Deploy"
        context: [deployment-production-ee, slack-secrets]
        filters: { branches: { only: [ main, master ] } }
        dc-environment: production
