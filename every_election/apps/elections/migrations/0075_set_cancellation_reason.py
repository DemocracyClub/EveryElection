# Generated by Django 4.2.3 on 2023-10-12 15:32
import csv
import os

from django.db import migrations


def set_cancellation_reasons(apps, schema_editor):
    dirname = os.path.dirname(os.path.basename(__file__))
    filename = os.path.abspath(
        os.path.join(dirname, "every_election/data/cancellation_reasons.csv")
    )

    Election = apps.get_model("elections", "Election")

    with open(filename) as cancellation_reasons_csv:
        cancellation_reasons = csv.DictReader(cancellation_reasons_csv)
        for line in cancellation_reasons:
            Election.private_objects.filter(
                election_id=line["election_id"]
            ).update(cancellation_reason=line["cancellation_reason"])


class Migration(migrations.Migration):
    dependencies = [
        ("elections", "0074_election_cancellation_reason"),
    ]

    operations = [migrations.RunPython(set_cancellation_reasons, migrations.RunPython.noop)]

# SQL used to generate CSV for this migration from the WCIVF database is as follows:
#
# with filtered_data as (
#     select epe.ballot_paper_id as bpid, winner_count, count(ppp.id) as candidates, metadata
#     from elections_postelection epe
#     left join people_personpost ppp
#     on ppp.post_election_id = epe.id
#     where cancelled is true
#     and (
#       (metadata->'cancelled_election'-> > 'detail') like '%death%'
#       or (metadata->'cancelled_election'-> > 'detail') like '%uncontested%'
#       or metadata is null
#     )
#     group by epe.id, winner_count, metadata
# )
# select bpid,
# CASE
#   WHEN(metadata->'cancelled_election'-> > 'detail') like '%death%'
#   THEN 'CANDIDATE_DEATH'
#   WHEN winner_count = candidates
#   THEN 'EQUAL_CANDIDATES'
#   WHEN winner_count > candidates
#   THEN 'UNDER_CONTESTED'
#   WHEN candidates = 0
#   THEN 'NO_CANDIDATES'
# END as cancellation_reason
# from filtered_data;
